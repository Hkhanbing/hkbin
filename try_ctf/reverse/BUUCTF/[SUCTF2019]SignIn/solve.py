v7 = "ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35"# 16
# v6 = v9 # 16
v4 = "103461035900816914121390101299049044413950405173712170434161686539878160984549" # 10
v5 = "65537" # 10

import gmpy2

# v6 = gmpy2.powmod(v6, v5, v4)

# v7 = v6 ^ v5 mod v4
# 求v6, 经典单项陷门函数
# c = msg ^ e mod N
# 万一N 能分解 是不是就是RSA

"""
282164587459512124844245113950593348271
366669102002966856876605669837014229419

"""
v4 = int(v4, 10)
v5 = int(v5, 10)
p = 282164587459512124844245113950593348271
q = 366669102002966856876605669837014229419

Oula = (p-1) * (q-1)

d = gmpy2.invert(v5, Oula)
v7 = int(v7, 16)
msg = gmpy2.powmod(v7, d, v4)


# msg = 185534734614696481020381637136165435809958101675798337848243069
msg = hex(msg).lstrip("0x")

data = []
for i in range(0, len(msg), 2):
    data.append('0x' + msg[i] + msg[i+1])


byte = [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
  0x61, 0x62, 0x63, 0x64, 0x65, 0x66]


flag = [0]*52

for i in range(0, 52, 2):
    flag[i] = byte.index(data[i])<<4
    flag[i+1] = byte.index(data[i])&0xF



# 整理一下 居然没写出来
import gmpy2
c = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35
n = 103461035900816914121390101299049044413950405173712170434161686539878160984549
e = 65537

p = 282164587459512124844245113950593348271
q = 366669102002966856876605669837014229419

Oula = (p-1) * (q-1)

d = gmpy2.invert(e, Oula)
m = gmpy2.powmod(c, d, n)

m = 185534734614696481020381637136165435809958101675798337848243069
m = hex(m).lstrip("0x")
for i in range(0, len(m), 2):
    print(chr(int(m[i] + m[i+1], 16)), end = "")


"""
suctf{Pwn_@_hundred_years}

提问 为什么没用到flag和v9的关系
"""

